{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./http-internal.service\";\nexport class UserService {\n  constructor(httpService) {\n    this.httpService = httpService;\n    this.routePrefix = 'api/user';\n  }\n  getAllUsers() {\n    return this.httpService.getFullRequest(`${this.routePrefix}`);\n  }\n  getUserByID(id) {\n    return this.httpService.getFullRequest(`${this.routePrefix}/${id}`);\n  }\n  getCurrentUser() {\n    return this.httpService.getFullRequest(`${this.routePrefix}/currentUser}`);\n  }\n  followUser(id) {\n    return this.httpService.postFullRequest(`${this.routePrefix}/${id}/follow`, {});\n  }\n  unfollowUser(id) {\n    return this.httpService.postFullRequest(`${this.routePrefix}/${id}/unfollow`, {});\n  }\n  putUser(id, value) {\n    return this.httpService.putFullRequest(`${this.routePrefix}/${id}`, value);\n  }\n  deleteUser(id) {\n    return this.httpService.deleteFullRequest(`${this.routePrefix}/${id}`);\n  }\n  copyUser({\n    id,\n    username,\n    email,\n    dateOfBirth,\n    password,\n    imageID,\n    avatar,\n    posts,\n    followersIds,\n    followingIds,\n    bio,\n    location,\n    bookmarkedPostsIds,\n    repostsIds\n  }) {\n    return {\n      id,\n      username,\n      email,\n      dateOfBirth,\n      password,\n      imageID,\n      avatar,\n      posts,\n      followersIds,\n      followingIds,\n      bio,\n      location,\n      bookmarkedPostsIds,\n      repostsIds\n    };\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpInternalService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,WAAiC;IAAjC,gBAAW,GAAXA,WAAW;IAFxB,gBAAW,GAAW,UAAU;EAEkB;EAElDC,WAAW;IAChB,OAAO,IAAI,CAACD,WAAW,CAACE,cAAc,CAAY,GAAG,IAAI,CAACC,WAAW,EAAE,CAAC;EAC1E;EAEOC,WAAW,CAACC,EAAU;IAC3B,OAAO,IAAI,CAACL,WAAW,CAACE,cAAc,CAAU,GAAG,IAAI,CAACC,WAAW,IAAIE,EAAE,EAAE,CAAC;EAC9E;EAEOC,cAAc;IACnB,OAAO,IAAI,CAACN,WAAW,CAACE,cAAc,CAAU,GAAG,IAAI,CAACC,WAAW,eAAe,CAAC;EACrF;EAEOI,UAAU,CAACF,EAAU;IAC1B,OAAO,IAAI,CAACL,WAAW,CAACQ,eAAe,CAAO,GAAG,IAAI,CAACL,WAAW,IAAIE,EAAE,SAAS,EAAE,EAAE,CAAC;EACvF;EAEOI,YAAY,CAACJ,EAAU;IAC5B,OAAO,IAAI,CAACL,WAAW,CAACQ,eAAe,CAAO,GAAG,IAAI,CAACL,WAAW,IAAIE,EAAE,WAAW,EAAE,EAAE,CAAC;EACzF;EAEOK,OAAO,CAACL,EAAU,EAAEM,KAAe;IACxC,OAAO,IAAI,CAACX,WAAW,CAACY,cAAc,CAAU,GAAG,IAAI,CAACT,WAAW,IAAIE,EAAE,EAAE,EAAEM,KAAK,CAAC;EACrF;EAEOE,UAAU,CAACR,EAAU;IAC1B,OAAO,IAAI,CAACL,WAAW,CAACc,iBAAiB,CAAO,GAAG,IAAI,CAACX,WAAW,IAAIE,EAAE,EAAE,CAAC;EAC9E;EAEOU,QAAQ,CAAC;IAACV,EAAE;IAAEW,QAAQ;IAAEC,KAAK;IAAEC,WAAW;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,MAAM;IAAEC,KAAK;IAAEC,YAAY;IAC/FC,YAAY;IAAEC,GAAG;IAAEC,QAAQ;IAAEC,kBAAkB;IAAEC;EAAU,CAAU;IACrE,OAAO;MACLvB,EAAE;MACFW,QAAQ;MACRC,KAAK;MACLC,WAAW;MACXC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,KAAK;MACLC,YAAY;MACZC,YAAY;MACZC,GAAG;MACHC,QAAQ;MACRC,kBAAkB;MAClBC;KACD;EACH;;AAnDW9B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["UserService","constructor","httpService","getAllUsers","getFullRequest","routePrefix","getUserByID","id","getCurrentUser","followUser","postFullRequest","unfollowUser","putUser","value","putFullRequest","deleteUser","deleteFullRequest","copyUser","username","email","dateOfBirth","password","imageID","avatar","posts","followersIds","followingIds","bio","location","bookmarkedPostsIds","repostsIds","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\mrsem\\group-project-thread\\group-project-thread\\ClientApp\\src\\app\\Services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInternalService } from './http-internal.service';\nimport { Observable } from 'rxjs';\nimport { User } from 'oidc-client';\nimport { UserDTO } from '../models/userDTO';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  public routePrefix: string = 'api/user';\n\n  constructor(private httpService : HttpInternalService) { }\n\n  public getAllUsers() : Observable<HttpResponse<UserDTO[]>>{\n    return this.httpService.getFullRequest<UserDTO[]>(`${this.routePrefix}`);\n  }\n\n  public getUserByID(id: number) : Observable<HttpResponse<UserDTO>>{\n    return this.httpService.getFullRequest<UserDTO>(`${this.routePrefix}/${id}`);\n  }\n\n  public getCurrentUser() : Observable<HttpResponse<UserDTO>>{\n    return this.httpService.getFullRequest<UserDTO>(`${this.routePrefix}/currentUser}`);\n  }\n\n  public followUser(id: number): Observable<HttpResponse<void>>{\n    return this.httpService.postFullRequest<void>(`${this.routePrefix}/${id}/follow`, {});\n  }\n\n  public unfollowUser(id: number): Observable<HttpResponse<void>>{\n    return this.httpService.postFullRequest<void>(`${this.routePrefix}/${id}/unfollow`, {});\n  }\n\n  public putUser(id: number, value : UserDTO): Observable<HttpResponse<UserDTO>>{\n    return this.httpService.putFullRequest<UserDTO>(`${this.routePrefix}/${id}`, value);\n  }\n\n  public deleteUser(id: number,): Observable<HttpResponse<void>>{\n    return this.httpService.deleteFullRequest<void>(`${this.routePrefix}/${id}`);\n  }\n\n  public copyUser({id, username, email, dateOfBirth, password, imageID, avatar, posts, followersIds, \n    followingIds, bio, location, bookmarkedPostsIds, repostsIds}: UserDTO){\n    return {\n      id,\n      username,\n      email,\n      dateOfBirth,\n      password,\n      imageID,\n      avatar,\n      posts,\n      followersIds,\n      followingIds, \n      bio,\n      location,\n      bookmarkedPostsIds,\n      repostsIds\n    }\n  }\n}\n \n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}