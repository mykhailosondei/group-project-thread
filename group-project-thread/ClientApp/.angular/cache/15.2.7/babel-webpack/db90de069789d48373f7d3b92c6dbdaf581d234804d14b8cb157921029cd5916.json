{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpInternalService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiURL;\n    this.headers = new HttpHeaders();\n  }\n  getHeaders() {\n    return this.headers;\n  }\n  getHeader(header) {\n    return this.headers.get(header);\n  }\n  setHeader(header, value) {\n    this.headers = this.headers.set(header, value);\n  }\n  deleteHeader(key) {\n    this.headers.delete(key);\n  }\n  getRequest(url, httpParams) {\n    return this.http.get(this.buildUrl(url), {\n      headers: this.getHeaders(),\n      params: httpParams\n    });\n  }\n  getFullRequest(url, httpParams) {\n    return this.http.get(this.buildUrl(url), {\n      observe: 'response',\n      headers: this.getHeaders(),\n      params: httpParams\n    });\n  }\n  postRequest(url, data) {\n    return this.http.post(this.buildUrl(url), data, {\n      headers: this.getHeaders()\n    });\n  }\n  postFullRequest(url, data) {\n    return this.http.post(this.buildUrl(url), data, {\n      observe: 'response',\n      headers: this.getHeaders()\n    });\n  }\n  postClearRequest(url, data) {\n    return this.http.post(this.buildUrl(url), data);\n  }\n  putRequest(url, data) {\n    return this.http.put(this.buildUrl(url), data, {\n      headers: this.getHeaders()\n    });\n  }\n  putFullRequest(url, data) {\n    return this.http.put(this.buildUrl(url), data, {\n      headers: this.getHeaders(),\n      observe: 'response'\n    });\n  }\n  deleteRequest(url, httpParams) {\n    return this.http.delete(this.buildUrl(url), {\n      headers: this.getHeaders(),\n      params: httpParams\n    });\n  }\n  deleteFullRequest(url, httpParams) {\n    return this.http.delete(this.buildUrl(url), {\n      headers: this.getHeaders(),\n      observe: 'response',\n      params: httpParams\n    });\n  }\n  buildUrl(url) {\n    if (url.startsWith(\"https://\") || url.startsWith(\"http://\")) {\n      return url;\n    }\n    return this.baseUrl + url;\n  }\n  convertDataToJSON(data) {\n    return JSON.stringify(data);\n  }\n}\nHttpInternalService.ɵfac = function HttpInternalService_Factory(t) {\n  return new (t || HttpInternalService)(i0.ɵɵinject(i1.HttpClient));\n};\nHttpInternalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpInternalService,\n  factory: HttpInternalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","environment","HttpInternalService","constructor","http","apiURL","getHeaders","headers","getHeader","header","get","setHeader","value","set","deleteHeader","key","delete","getRequest","url","httpParams","buildUrl","params","getFullRequest","observe","postRequest","data","post","postFullRequest","postClearRequest","putRequest","put","putFullRequest","deleteRequest","deleteFullRequest","startsWith","baseUrl","convertDataToJSON","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\mrsem\\group-project-thread\\group-project-thread\\ClientApp\\src\\app\\Services\\http-internal.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpInternalService {\n  public baseUrl: string = environment.apiURL;\n  public headers: HttpHeaders = new HttpHeaders();\n\n  constructor(private http: HttpClient) { }\n\n  public getHeaders() : HttpHeaders{\n    return this.headers\n  }\n\n  public getHeader(header : string ) : string | null{\n    return this.headers.get(header);\n  }\n\n  public setHeader(header: string, value : string): void {\n    this.headers = this.headers.set(header, value);\n  }\n  public deleteHeader(key: string): void {\n    this.headers.delete(key);\n  }\n  \n  public getRequest<T>(url: string, httpParams?: HttpParams): Observable<T> {\n    return this.http.get<T>(this.buildUrl(url), { headers: this.getHeaders(), params: httpParams });\n  }\n\n  public getFullRequest<T>(url: string, httpParams?: HttpParams): Observable<HttpResponse<T>> {\n    return this.http.get<T>(this.buildUrl(url), { observe: 'response', headers: this.getHeaders(), params: httpParams });\n  }\n\n  public postRequest<T>(url: string, data: object): Observable<T> {\n    return this.http.post<T>(this.buildUrl(url), data, { headers: this.getHeaders() });\n  } \n  \n  public postFullRequest<T>(url: string, data: object): Observable<HttpResponse<T>>{\n    return this.http.post<T>(this.buildUrl(url), data, {observe: 'response', headers: this.getHeaders() });\n  }\n\n  public postClearRequest<T>(url: string, data: object): Observable<T>{\n    return this.http.post<T>(this.buildUrl(url), data);\n  }\n\n  public putRequest<T>(url: string, data: object): Observable<T>{\n    return this.http.put<T>(this.buildUrl(url), data, {headers: this.getHeaders()});\n  }\n\n  public putFullRequest<T>(url: string, data: object): Observable<HttpResponse<T>>{\n    return this.http.put<T>(this.buildUrl(url), data, {headers: this.getHeaders(), observe : 'response'});\n  }\n\n  public deleteRequest<T>(url: string, httpParams?: any): Observable<T> {\n    return this.http.delete<T>(this.buildUrl(url), { headers: this.getHeaders(), params: httpParams });\n  }\n\n  public deleteFullRequest<T>(url: string, httpParams?: any): Observable<HttpResponse<T>> {\n    return this.http.delete<T>(this.buildUrl(url), { headers: this.getHeaders(), observe: 'response', params: httpParams });\n  }\n\n  public buildUrl(url: string): string {\n    if (url.startsWith(\"https://\") || url.startsWith(\"http://\")){\n      return url;\n    }\n    return this.baseUrl + url;\n  }\n  \n  public convertDataToJSON(data: object) : string{\n    return JSON.stringify(data);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}