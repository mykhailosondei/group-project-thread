{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet SignUpPageComponent = class SignUpPageComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.passType = \"password\";\n    this.repeatPassType = \"password\";\n    this.isText = false;\n    this.isTextRepeatPass = false;\n    this.eyeIcon = \"fa-eye-slash\";\n    this.repeatEyeIcon = \"fa-eye-slash\";\n    this.firstpassword = \"\";\n    this.repeatedPassword = \"\";\n    this.isEqualMessage = \"\";\n    this.isEnoughChrMessage = \"\";\n    this.messageColor = \"red\";\n    this.passwordsMatch = false;\n    this.selectedDay = null;\n    this.days = [];\n    this.selectedYear = null;\n    this.years = [];\n    this.selectedMonth = null;\n    this.months = [{\n      value: 1,\n      name: 'January'\n    }, {\n      value: 2,\n      name: 'February'\n    }, {\n      value: 3,\n      name: 'March'\n    }, {\n      value: 4,\n      name: 'April'\n    }, {\n      value: 5,\n      name: 'May'\n    }, {\n      value: 6,\n      name: 'June'\n    }, {\n      value: 7,\n      name: 'July'\n    }, {\n      value: 8,\n      name: 'August'\n    }, {\n      value: 9,\n      name: 'September'\n    }, {\n      value: 10,\n      name: 'October'\n    }, {\n      value: 11,\n      name: 'November'\n    }, {\n      value: 12,\n      name: 'December'\n    }];\n    this.origPassMatchError = false;\n    this.repPassMatchError = false;\n    this.touched1 = false;\n    this.touched2 = false;\n    // Generate an array of days (1 to 31) and populate the 'days' property\n    for (let i = 1; i <= 31; i++) {\n      this.days.push(i);\n    }\n    for (let i = 2023; i >= 1904; i--) {\n      this.years.push(i);\n    }\n  }\n  ngOnInit() {\n    this.regisForm = this.fb.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', [Validators.required, this.passwordValidator(), this.originalPasswordMatchValidator()]],\n      repeatPassword: ['', [Validators.required, this.repeatedPasswordMatchValidator()]],\n      selectedMonth: ['', Validators.required],\n      selectedDay: ['', Validators.required],\n      selectedYear: ['', Validators.required]\n    });\n  }\n  hideShowPass() {\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.passType = \"text\" : this.passType = \"password\";\n  }\n  hideShowRepeatPass() {\n    this.isTextRepeatPass = !this.isTextRepeatPass;\n    this.isTextRepeatPass ? this.repeatEyeIcon = \"fa-eye\" : this.repeatEyeIcon = \"fa-eye-slash\";\n    this.isTextRepeatPass ? this.repeatPassType = \"text\" : this.repeatPassType = \"password\";\n  }\n  validateAllFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsDirty({\n          onlySelf: true\n        });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFields(control);\n      }\n    });\n  }\n  passwordValidator() {\n    return control => {\n      const password = control.value;\n      if (password.length < 8) {\n        return {\n          'passwordLength': true\n        };\n      }\n      return null;\n    };\n  }\n  originalPasswordMatchValidator() {\n    return control => {\n      const password = control.value;\n      this.touched1 = true;\n      if (password !== this.repeatedPassword) {\n        this.origPassMatchError = true;\n        this.repPassMatchError = false;\n        console.log(`repeatedPassword1 ${this.repPassMatchError}`);\n        console.log(`originalPassword1 ${this.origPassMatchError}`);\n        return {\n          'passwordMatch': true\n        };\n      }\n      this.repPassMatchError = false;\n      this.origPassMatchError = false;\n      console.log(`repeatedPassword1* ${this.repPassMatchError}`);\n      console.log(`originalPassword1* ${this.origPassMatchError}`);\n      return null;\n    };\n  }\n  repeatedPasswordMatchValidator() {\n    return control => {\n      const repeatpassword = control.value;\n      this.touched2 = true;\n      if (repeatpassword !== this.firstpassword) {\n        this.origPassMatchError = false;\n        this.repPassMatchError = true;\n        console.log(`repeatedPassword2 ${this.repPassMatchError}`);\n        console.log(`originalPassword2 ${this.origPassMatchError}`);\n        return {\n          'passwordMatch': true\n        };\n      }\n      this.repPassMatchError = false;\n      this.origPassMatchError = false;\n      console.log(`repeatedPassword2* ${this.repPassMatchError}`);\n      console.log(`originalPassword2* ${this.origPassMatchError}`);\n      return null;\n    };\n  }\n  updateDates() {\n    let daysInMonth = this.daysBasedOnDropDowns();\n    this.days = [];\n    for (let i = 1; i <= daysInMonth; i++) {\n      this.days.push(i);\n    }\n  }\n  daysBasedOnDropDowns() {\n    if (this.selectedYear != null && this.selectedMonth != null) {\n      return new Date(this.selectedYear, this.selectedMonth, 0).getDate();\n    } else if (this.selectedMonth != null) {\n      return this.getDaysInMonth();\n    } else {\n      return 31;\n    }\n  }\n  getDaysInMonth() {\n    let thirtyDays = [4, 6, 9, 11];\n    let monthToNum = Number(this.selectedMonth);\n    console.log(typeof monthToNum);\n    if (thirtyDays.includes(monthToNum)) {\n      return 30;\n    } else if (monthToNum === 2) {\n      return 29;\n    } else {\n      return 31;\n    }\n  }\n};\nSignUpPageComponent = __decorate([Component({\n  selector: 'app-sign-up-page',\n  templateUrl: './sign-up-page.component.html',\n  styleUrls: ['./sign-up-page.component.scss', '../../../assets/LoginAndRegisCommon.scss']\n})], SignUpPageComponent);\nexport { SignUpPageComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","SignUpPageComponent","constructor","fb","value","name","i","days","push","years","ngOnInit","regisForm","group","username","required","email","password","passwordValidator","originalPasswordMatchValidator","repeatPassword","repeatedPasswordMatchValidator","selectedMonth","selectedDay","selectedYear","hideShowPass","isText","eyeIcon","passType","hideShowRepeatPass","isTextRepeatPass","repeatEyeIcon","repeatPassType","validateAllFields","formGroup","Object","keys","controls","forEach","field","control","get","markAsDirty","onlySelf","length","touched1","repeatedPassword","origPassMatchError","repPassMatchError","console","log","repeatpassword","touched2","firstpassword","updateDates","daysInMonth","daysBasedOnDropDowns","Date","getDate","getDaysInMonth","thirtyDays","monthToNum","Number","includes","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\mrsem\\group-project-thread\\group-project-thread\\ClientApp\\src\\app\\Components\\sign-up-page\\sign-up-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-sign-up-page',\n  templateUrl: './sign-up-page.component.html',\n  styleUrls: ['./sign-up-page.component.scss', '../../../assets/LoginAndRegisCommon.scss']\n})\nexport class SignUpPageComponent {\n  passType: string = \"password\";\n  repeatPassType: string = \"password\";\n  isText: boolean = false;\n  isTextRepeatPass: boolean = false;\n  eyeIcon: string = \"fa-eye-slash\";\n  repeatEyeIcon: string = \"fa-eye-slash\";\n  firstpassword: string = \"\";\n  repeatedPassword: string = \"\";\n  isEqualMessage: string = \"\";\n  isEnoughChrMessage: string = \"\";\n  messageColor: string = \"red\";\n  passwordsMatch: boolean = false;\n  selectedDay: number | null = null;\n  days: number[] = [];\n  selectedYear: number | null = null;\n  years: number[] = [];\n  selectedMonth: number | null = null;\n  months: { value: number; name: string }[] = [\n    { value: 1, name: 'January' },\n    { value: 2, name: 'February' },\n    { value: 3, name: 'March' },\n    { value: 4, name: 'April' },\n    { value: 5, name: 'May' },\n    { value: 6, name: 'June' },\n    { value: 7, name: 'July' },\n    { value: 8, name: 'August' },\n    { value: 9, name: 'September' },\n    { value: 10, name: 'October' },\n    { value: 11, name: 'November' },\n    { value: 12, name: 'December' }\n  ];\n  regisForm!: FormGroup;\n  origPassMatchError: boolean = false;\n  repPassMatchError: boolean = false;\n  touched1: boolean = false;\n  touched2: boolean = false;\n\n  constructor(private fb: FormBuilder) {\n    // Generate an array of days (1 to 31) and populate the 'days' property\n    for (let i = 1; i <= 31; i++) {\n      this.days.push(i);\n    }\n    for (let i = 2023; i>=1904;i--){\n      this.years.push(i);\n    }\n  }\n  ngOnInit() : void{\n    this.regisForm=this.fb.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', [Validators.required, this.passwordValidator(), this.originalPasswordMatchValidator()]],\n      repeatPassword: ['', [Validators.required, this.repeatedPasswordMatchValidator()]],\n      selectedMonth: ['', Validators.required],\n      selectedDay: ['', Validators.required],\n      selectedYear: ['', Validators.required]\n    })\n  }\n  \n  hideShowPass(){\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.passType = \"text\" : this.passType = \"password\";\n  }\n\n  hideShowRepeatPass(){\n    this.isTextRepeatPass = !this.isTextRepeatPass;\n    this.isTextRepeatPass ? this.repeatEyeIcon = \"fa-eye\" : this.repeatEyeIcon = \"fa-eye-slash\";\n    this.isTextRepeatPass ? this.repeatPassType = \"text\" : this.repeatPassType = \"password\";\n  }\n\n\n  private validateAllFields(formGroup: FormGroup){\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl){\n        control.markAsDirty({onlySelf:true});\n      }else if(control instanceof FormGroup){\n        this.validateAllFields(control);\n      }\n    })\n  }\n\n  passwordValidator(): Validators {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const password = control.value;\n\n      \n      if (password.length < 8) {\n        return { 'passwordLength': true };\n      }\n\n      return null; \n    };\n  }\n\n  originalPasswordMatchValidator(): Validators {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const password = control.value;\n      this.touched1 = true;\n      if (password !== this.repeatedPassword) {\n        this.origPassMatchError = true;\n        this.repPassMatchError = false;\n        console.log(`repeatedPassword1 ${this.repPassMatchError}`);\n        console.log(`originalPassword1 ${this.origPassMatchError}`);\n        return { 'passwordMatch': true };\n      }\n      this.repPassMatchError = false;\n      this.origPassMatchError = false;\n      console.log(`repeatedPassword1* ${this.repPassMatchError}`);\n      console.log(`originalPassword1* ${this.origPassMatchError}`);\n      return null;\n    };\n  }\n  repeatedPasswordMatchValidator(): Validators {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const repeatpassword = control.value;\n      this.touched2 = true;\n      if (repeatpassword !== this.firstpassword) {\n        this.origPassMatchError = false;\n        this.repPassMatchError = true;\n        console.log(`repeatedPassword2 ${this.repPassMatchError}`);\n        console.log(`originalPassword2 ${this.origPassMatchError}`);\n        return { 'passwordMatch': true };\n      }\n      this.repPassMatchError = false;\n      this.origPassMatchError = false;\n      console.log(`repeatedPassword2* ${this.repPassMatchError}`);\n      console.log(`originalPassword2* ${this.origPassMatchError}`);\n      return null;\n    };\n  }\n\n  updateDates(){\n    let daysInMonth: number = this.daysBasedOnDropDowns();\n    \n    this.days = [];\n    for (let i = 1; i <= daysInMonth; i++) {\n    this.days.push(i);\n    }\n  }\n  \n  daysBasedOnDropDowns(): number{\n    if (this.selectedYear != null && this.selectedMonth != null) {\n      return new Date(this.selectedYear, this.selectedMonth, 0).getDate();\n    } \n    else if(this.selectedMonth != null){ \n      return this.getDaysInMonth();\n    }\n    else {\n      return 31;\n    }\n  }\n\n  getDaysInMonth(): number{\n    \n    let thirtyDays: number[] = [4, 6, 9, 11];\n    let monthToNum: number = Number(this.selectedMonth!);\n    console.log(typeof(monthToNum));\n    if(thirtyDays.includes(monthToNum)){\n      return 30;\n    }\n    else if (monthToNum === 2){\n      return 29;\n    }\n    else{\n      return 31;\n    }\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}