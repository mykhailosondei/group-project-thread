{"ast":null,"code":"import { map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http-internal.service\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"./event.service\";\nexport class AuthService {\n  constructor(httpService, userService, eventService) {\n    this.httpService = httpService;\n    this.userService = userService;\n    this.eventService = eventService;\n    this.routePrefix = '/api/Auth';\n    this.user = null;\n  }\n  getUser() {\n    return this.user ? of(this.user) : this.userService.getCurrentUser().pipe(map(response => {\n      this.user = response.body;\n      this.eventService.userChanged(this.user);\n      return this.user;\n    }));\n  }\n  setUser(user) {\n    this.user = user;\n    this.eventService.userChanged(user);\n  }\n  register(user) {\n    console.log(this.httpService.headers);\n    return this.handleAuthResponse(this.httpService.postFullRequest(`${this.routePrefix}/register`, user));\n  }\n  login(user) {\n    this.httpService.setHeader('Content-Type', 'application/json');\n    return this.handleAuthResponse(this.httpService.postFullRequest());\n  }\n  handleAuthResponse(observable) {\n    return observable.pipe(map(resp => {\n      const authToken = resp.body?.authToken;\n      const user = resp.body?.user;\n      if (authToken && user) {\n        this.setToken(authToken);\n        this.user = user;\n        this.eventService.userChanged(user);\n        return user;\n      } else {\n        console.log(\"something went wrong\");\n        return null;\n      }\n    }));\n  }\n  setToken(token) {\n    if (token) {\n      localStorage.setItem('authToken', JSON.stringify(token));\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpInternalService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.EventService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;;;AAW1C,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,WAAiC,EAAUC,WAAyB,EAC9EC,YAA0B;IADhB,gBAAW,GAAXF,WAAW;IAAgC,gBAAW,GAAXC,WAAW;IAChE,iBAAY,GAAZC,YAAY;IAJf,gBAAW,GAAW,WAAW;IAChC,SAAI,GAAmB,IAAI;EAGK;EAEjCC,OAAO;IACZ,OAAO,IAAI,CAACC,IAAI,GAAGP,EAAE,CAAC,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACH,WAAW,CAACI,cAAc,EAAE,CAACC,IAAI,CACvEV,GAAG,CAAEW,QAAQ,IAAI;MACf,IAAI,CAACH,IAAI,GAAGG,QAAQ,CAACC,IAAI;MACzB,IAAI,CAACN,YAAY,CAACO,WAAW,CAAC,IAAI,CAACL,IAAI,CAAC;MACxC,OAAO,IAAI,CAACA,IAAI;IAClB,CAAC,CAAE,CACJ;EACH;EAEOM,OAAO,CAACN,IAAa;IAC1B,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACF,YAAY,CAACO,WAAW,CAACL,IAAI,CAAC;EACrC;EAEOO,QAAQ,CAACP,IAAqB;IACnCQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,WAAW,CAACc,OAAO,CAAC;IACrC,OAAO,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAACf,WAAW,CAACgB,eAAe,CAAc,GAAG,IAAI,CAACC,WAAW,WAAW,EAAEb,IAAI,CAAC,CAAC;EACrH;EACOc,KAAK,CAACd,IAAkB;IAC7B,IAAI,CAACJ,WAAW,CAACmB,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC9D,OAAO,IAAI,CAACJ,kBAAkB,CAAC,IAAI,CAACf,WAAW,CAACgB,eAAe,EAAe,CAAC;EACjF;EACQD,kBAAkB,CAACK,UAAiD;IAC1E,OAAOA,UAAU,CAACd,IAAI,CACpBV,GAAG,CAAEyB,IAAI,IAAI;MACX,MAAMC,SAAS,GAAGD,IAAI,CAACb,IAAI,EAAEc,SAAS;MACtC,MAAMlB,IAAI,GAAGiB,IAAI,CAACb,IAAI,EAAEJ,IAAI;MAE5B,IAAIkB,SAAS,IAAIlB,IAAI,EAAE;QACnB,IAAI,CAACmB,QAAQ,CAACD,SAAS,CAAC;QACxB,IAAI,CAAClB,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACF,YAAY,CAACO,WAAW,CAACL,IAAI,CAAC;QACnC,OAAOA,IAAI;OACd,MACG;QACFQ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnC,OAAO,IAAI;;IAEf,CAAC,CAAC,CACH;EACH;EAEQU,QAAQ,CAACC,KAAa;IAC5B,IAAIA,KAAK,EAAC;MACRC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;;EAE5D;;AAtDW1B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["map","of","AuthService","constructor","httpService","userService","eventService","getUser","user","getCurrentUser","pipe","response","body","userChanged","setUser","register","console","log","headers","handleAuthResponse","postFullRequest","routePrefix","login","setHeader","observable","resp","authToken","setToken","token","localStorage","setItem","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\mrsem\\group-project-thread\\group-project-thread\\ClientApp\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http'\nimport { UserDTO } from '../models/userDTO';\nimport { Observable, map, of } from 'rxjs';\nimport { HttpInternalService } from './http-internal.service';\nimport { UserService } from './user.service';\nimport { EventService } from './event.service';\nimport { AuthUserDTO } from '../models/auth/authUserDTO';\nimport { RegisterUserDTO } from '../models/auth/registerUserDTO';\nimport { LoginUserDTO } from '../models/auth/loginUserDTO';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public routePrefix: string = '/api/Auth';\n  private user: UserDTO | null = null;\n\n  constructor(private httpService : HttpInternalService, private userService : UserService,\n    private eventService: EventService) { }\n\n  public getUser() {\n    return this.user ? of(this.user) : this.userService.getCurrentUser().pipe(\n      map((response) => {\n        this.user = response.body;\n        this.eventService.userChanged(this.user);\n        return this.user;\n      } )\n    )\n  }\n\n  public setUser(user: UserDTO){\n    this.user = user;\n    this.eventService.userChanged(user);\n  }\n\n  public register(user: RegisterUserDTO){\n    console.log(this.httpService.headers);\n    return this.handleAuthResponse(this.httpService.postFullRequest<AuthUserDTO>(`${this.routePrefix}/register`, user))\n  }\n  public login(user: LoginUserDTO){\n    this.httpService.setHeader('Content-Type', 'application/json');\n    return this.handleAuthResponse(this.httpService.postFullRequest<AuthUserDTO>())\n  }\n  private handleAuthResponse(observable: Observable<HttpResponse<AuthUserDTO>>) {\n    return observable.pipe(\n      map((resp) => {\n        const authToken = resp.body?.authToken;\n        const user = resp.body?.user;\n\n        if (authToken && user) {\n            this.setToken(authToken);\n            this.user = user;\n            this.eventService.userChanged(user);\n            return user;\n        }\n        else{\n          console.log(\"something went wrong\");\n          return null;\n        }\n      })\n    );\n  }\n\n  private setToken(token: string){\n    if (token){\n      localStorage.setItem('authToken', JSON.stringify(token));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}